This application is a html page that I can host on my website. I need to be able to log into it via my google permissions, that should also give me access to reading and writing files in my google drive.

It needs a database, the database is a list of passengers that ride on a bus. These passengers ride the same bus every day, and I occasionally need to add riders, or mark them as no longer riding the bus (hidden).

Each passenger needs to have daily entries written about them, and I need two entries every single day (am and pm) trips.

Once you are logged into the application, I need to have a date selector, and it should default to the current day. Although I can select a different day and see all of the entries for that day.

At the top of the screen I want to be able to select AM or PM, and then I want the main view to show me the list of passengers with their names and text boxes where I can use my phone keyboard to either type or dictate the content of the text boxes. This will allow me to easily leave my notes for that passenger.

This would auto save every entry to the database file saved to my google drive.

The google drive files should be a simple SQLite database file, and it should have a few basic tables such as passengers with simple fields such as name, id, and order, and then a notes table that has the passenger id, the date, time of day (am/pm), and text field with the note content.

At the top of the main page there should also be a button that pops up an view that allows me to manage my current passengers, and I can give them a name, and then order them, and move them up or down easily (up arrows or down arrows to change the position of the current order). Then when I close the view it will update my list of passengers for every day. There should be buttons to add new passengers, or re-add an existing (hidden) passenger.

If I add a new passenger, then it will create a database entry for them. If I remove them, then it should just mark the passenger as hidden so it doesn't show up in my list, but I want to make sure the entries are still in the database. I can also add passengers that were hidden back to the list.

I want the app to renew my sessions to google whenever it needs to so I can always be in sync with my database. On first connecting to my google profile, if a database doesn't exist we need to create a new database. And we should use the same name every time so that we can always check if the database exists and connect to it. So we may want to create a folder on the google drive to keep any relevant files. I would assume that the google drive would have the database file and a preferences file snice this application doesn't have any on phone cache.

I want a clean architecture, this should be mostly an entirely client base javascript application. But I want there to be clear javascript files using proper class archiecture, SOLID design principles. And a separate file for any CSS styling that we use for the application. The application should support light and dark mode, and should look fairly modern.

================================================================================
ARCHITECTURE DESIGN
================================================================================

Technology Stack:
- Frontend: Pure HTML5, CSS3, vanilla JavaScript (ES6+ modules)
- Database: SQL.js (SQLite compiled to WebAssembly - runs in browser)
- Storage: Google Drive API for persistence
- Authentication: Google OAuth 2.0 (Google Identity Services)

File Structure:
/
├── index.html                 # Main application shell
├── styles/
│   └── main.css              # All styling (light/dark mode)
├── js/
│   ├── main.js               # Application entry point
│   ├── auth/
│   │   └── GoogleAuthService.js      # Single Responsibility: Authentication
│   ├── storage/
│   │   ├── GoogleDriveService.js     # Single Responsibility: Drive operations
│   │   └── DatabaseService.js        # Single Responsibility: SQLite operations
│   ├── models/
│   │   ├── Passenger.js              # Data model
│   │   └── Note.js                   # Data model
│   ├── services/
│   │   ├── PassengerService.js       # Business logic: Passenger CRUD
│   │   └── NoteService.js            # Business logic: Note CRUD
│   └── ui/
│       ├── DateSelector.js           # UI Component
│       ├── TripSelector.js           # UI Component (AM/PM)
│       ├── PassengerList.js          # UI Component
│       └── PassengerManager.js       # UI Component (modal)
└── lib/
    └── sql-wasm.js           # SQL.js library

Database Schema:
CREATE TABLE passengers (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    display_order INTEGER NOT NULL,
    is_hidden INTEGER DEFAULT 0,
    created_at TEXT DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE notes (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    passenger_id INTEGER NOT NULL,
    note_date TEXT NOT NULL,
    time_of_day TEXT NOT NULL CHECK(time_of_day IN ('AM', 'PM')),
    note_text TEXT DEFAULT '',
    created_at TEXT DEFAULT CURRENT_TIMESTAMP,
    updated_at TEXT DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (passenger_id) REFERENCES passengers(id),
    UNIQUE(passenger_id, note_date, time_of_day)
);

CREATE INDEX idx_notes_date ON notes(note_date);
CREATE INDEX idx_notes_passenger ON notes(passenger_id);

Architecture Layers:
1. Authentication Layer (GoogleAuthService.js)
   - Handles Google OAuth flow
   - Auto-refreshes tokens
   - Returns authentication state (never null)

2. Storage Layer (GoogleDriveService.js + DatabaseService.js)
   - GoogleDriveService: Upload/download database file from Drive
   - DatabaseService: All SQLite operations (queries, migrations)
   - Error handling at source - returns empty collections on failure
   - Creates database/folder if not exists on first run

3. Business Logic Layer (PassengerService.js + NoteService.js)
   - PassengerService: GetActivePassengers(), AddPassenger(), HidePassenger(), ReorderPassengers()
   - NoteService: GetNotesForDate(), SaveNote(), AutoSaveNote()
   - No null returns - always return valid collections/objects
   - Validates inputs at method entry

4. UI Layer (Component classes)
   - Each component manages its own DOM and events
   - Depends on services via dependency injection
   - Renders based on data, doesn't manage state

Key Design Decisions:
- No frameworks (React/Vue/Angular) for lightweight approach
- SQL.js runs in browser - no backend needed
- SOLID principles: Single Responsibility per class
- Error handling at source layer
- Auto-save with debouncing (500ms)
- Background sync to Drive every 30 seconds if changes exist
- Token refresh handled automatically
- Modern CSS Grid/Flexbox layout
- Dark mode via CSS custom properties
- Mobile-first, touch-friendly design

RECENT UPDATES & FEATURES

## Local Testing Mode (Added: 2025-10-29)

Added ability to test application locally without Google OAuth setup.

**New Files:**
- js/config.js - Configuration toggle between local/production modes
- js/storage/LocalStorageService.js - Browser localStorage implementation

**Features:**
- Toggle via AppConfig.useLocalStorage flag
- Data stored in browser's localStorage (base64 encoded)
- No authentication required in local mode
- Visual indicator banner when in local testing mode
- Same interface as GoogleDriveService for easy switching

**Usage:**
- Set useLocalStorage: true in config.js for local testing
- Set useLocalStorage: false for production with Google Drive

## Custom Dialog System (Added: 2025-10-29)

Replaced browser's prompt() and confirm() dialogs with custom implementation.

**New Files:**
- js/ui/Dialog.js - Custom dialog component

**Problem Solved:**
- Browser dialogs can be blocked if user clicks "Don't show"
- Once blocked, all future dialogs fail (breaking add/hide passenger features)

**Features:**
- Custom in-page dialogs that cannot be blocked
- Prompt() method for text input
- Confirm() method for yes/no questions
- Promise-based API for async/await usage
- Keyboard support (Enter to confirm, focus management)
- Styled to match application theme
- Mobile-friendly
- Supports light/dark mode

**Updated Files:**
- js/ui/PassengerManager.js - Now uses Dialog component
- styles/main.css - Added dialog styling

## Database Selection Feature (Added: 2025-10-29)

Added ability to select and switch between different database files in Google Drive, enabling database sharing between users.

**New Files:**
- js/services/PreferencesService.js - Manages user preferences stored in Google Drive
- js/ui/SettingsManager.js - Settings UI with database selection

**Features:**
- Settings button with SVG gear icon in header
- User preferences stored in preferences.json in Google Drive
- Select any .db file from Google Drive (including shared files)
- Switch between databases with application reload
- Reset to default database option
- Current database name displayed in settings
- Database list shows file name and last modified date

**User Flow:**
1. Click gear icon → Settings modal opens
2. View current database name
3. Click "Select Different Database" → Browse all .db files in Drive
4. Select a database → Confirm → App reloads with new database
5. Or click "Reset to Default" to return to default passengers.db

**Use Cases:**
- Multiple users can share the same database file via Google Drive sharing
- Switch between personal and shared databases
- Use different databases for different bus routes
- Backup and restore by selecting different database files

**Technical Details:**
- Preferences file: BusPassengerNotes/preferences.json
- Contains: databaseFileId, databaseFileName, lastModified
- Settings button hidden in local testing mode
- Application reloads after database change to ensure clean state

**Updated Files:**
- js/storage/GoogleDriveService.js - Added preferences and file listing methods
- js/main.js - Integrated PreferencesService and SettingsManager
- index.html - Added settings button with SVG gear icon
- styles/main.css - Added settings UI styling
